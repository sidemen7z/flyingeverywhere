import { MessageStream } from '../../views/chat/messages/stream/messageStream';
import { ServiceIO, StreamHandlers } from '../../services/serviceIO';
import { Messages } from '../../views/chat/messages/messages';
import { Response as ResponseI } from '../../types/response';
import { Stream as StreamI } from '../../types/stream';
type UpsertFunc = (response?: ResponseI) => MessageStream | void;
export declare class Stream {
    static request(io: ServiceIO, body: object, messages: Messages, stringifyBody?: boolean): Promise<void>;
    static simulate(messages: Messages, sh: StreamHandlers, result: ResponseI): void;
    private static populateMessages;
    static isSimulation(stream?: StreamI): boolean;
    static isSimulatable(stream?: StreamI, respone?: ResponseI): string | false | undefined;
    private static abort;
    static upsertWFiles(messages: Messages, upsert: UpsertFunc, stream?: MessageStream, response?: ResponseI): void;
}
export {};
//# sourceMappingURL=stream.d.ts.map